#!/usr/bin/env bash

svnall() {
  for _tmp in $(fd -td '.svn' .); do 
    dir="${_tmp%%.svn*}" 
    echo -e "\n\033[0;32m$dir\033[0m"
    (
      cd "$dir" || exit
      if [ -n "$1" ]; then 
        bash -c "$1"
      else 
        svn status
      fi
    )
  done
}

gitall() {
  for _tmp in $(fd '.git$' .); do 
    dir="${_tmp%%.git*}"
    echo -e "\n\033[0;32m$dir\033[0m"
    (
      cd "$dir" || exit
      if [ -n "$1" ]; then 
        bash -c "$1"
      else 
        git -c color.status=always -c color.ui=always status | grep -ve 'Your branch is up to date' -ve 'nothing to commit' -ve '^$'
      fi
    )
  done
}

fromhex() {
  hex=$1
  if [[ $hex == "#"* ]]; then
    hex=$(echo "$1" | awk '{print substr("$0",2)}')
  fi
  r=$(printf '0x%0.2s' "$hex")
  g=$(printf '0x%0.2s' $${hex#??})
  b=$(printf '0x%0.2s' $${hex#????})
  echo -e "$(printf "%03d" "$(((r<75?0:(r-35)/40)*6*6+(g<75?0:(g-35)/40)*6+(b<75?0:(b-35)/40)+16))")"
}

hex_to_rgb() {
    # Usage: hex_to_rgb "#FFFFFF"
    #        hex_to_rgb "000000"
    : "${1/\#}"
    ((r=16#${_:0:2},g=16#${_:2:2},b=16#${_:4:2}))
    printf '%s\n' "$r $g $b"
}

rgb_to_hex() {
    # Usage: rgb_to_hex "r" "g" "b"
    printf '#%02x%02x%02x\n' "$1" "$2" "$3"
}

bri() { echo "$1" > /sys/class/backlight/intel_backlight/brightness; }

upper() {
    # Usage: upper "string"
    printf '%s\n' "${1^^}"
}

lower() {
    # Usage: lower "string"
    printf '%s\n' "${1,,}"
}

reverse_case() {
    # Usage: reverse_case "string"
    printf '%s\n' "${1~~}"
}

strip_all() {
    printf '%s\n' "${1//$2}"
}

strip_all() {
    printf '%s\n' "${1//$2}"
}

urlencode() {
    local LC_ALL=C
    for (( i = 0; i < ${#1}; i++ )); do
        : "${1:i:1}"
        case "$_" in
            [a-zA-Z0-9.~_-])
                printf '%s' "$_"
            ;;

            *)
                printf '%%%02X' "'$_"
            ;;
        esac
    done
    printf '\n'
}

urldecode() {
    # Usage: urldecode "string"
    : "${1//+/ }"
    printf '%b\n' "${_//%/\\x}"
}

bash_cat() { echo "$(<"$1")"; }

countdown() {
    start="$(( $(date '+%s') + $1))"
    while [ "$start" -ge "$(date +%s)" ]; do
        time="$(( $start - $(date +%s) ))"
        printf '%s\r' "$(date -u -d "@$time" +%H:%M:%S)"
        sleep 0.1
    done
}

stopwatch() {
    start=$(date +%s)
    while true; do
        time="$(( $(date +%s) - $start))"
        printf '%s\r' "$(date -u -d "@$time" +%H:%M:%S)"
        sleep 0.1
    done
}

clean_node_modules() {
  find . -type f -name "package.json" ! -path "./.conf/*" -a ! -path "./.backup/*" | xargs -I{} bash -c 'sudo rm -rf $(dirname {})/node_modules'
  find . -type f -name "package.json" ! -path "*node_modules*" -a ! -path "./.conf/*" | xargs -I{} bash -c '[ ! -d "$(dirname {})/node_modules" ] && npm i --prefix $(dirname {})'
}

unlink_node_modules() {
  d=$PWD
  for dir in "$(find . -type d -name ".bin")"; do
    cd "$d" && cd "$dir"
    ls -l | xargs -I{} bash -c '[[ '\''{}'\'' =~ .+[[:digit:]][[:space:]](.+)[[:space:]]-\>[[:space:]](.+) ]] && rm "${BASH_REMATCH[1]}" && cp "${BASH_REMATCH[2]}" "./${BASH_REMATCH[1]}"'
  done
  cd "$d"
}

fuck_you_eclipse() {
  clean_node_modules && unlink_node_modules
}

cdc() { cd "$(pwd | sed "s/$1/$2/g")"; }

gcap() { git commit -am "$1" && git push; }

newws() {
    git clone -b wip 'https://git.getonline.ch/inteco/services/core/web/source/development-env/template-webapp-WS.git' "$1-workspace"
    cd "$1-workspace"
    [ -f '.env' ] && sed -i "s@\[\[customer_id\]\]@$1@g" '.env'
    git submodule init && git submodule update --remote --merge
    cd ".conf"
    npm i && npm run init && node tool.js
    cd .. && node checkout.js #&& rm -rf .git*
    cd .backup
    ./backup.sh -sluyo a -c "$1" -t c -p ../"$1"-webapp/src/main/webapp
    mv ../"$1"-webapp/src/main/webapp/backup ../"$1"-webapp/src/main/webapp/restore
    mkdir ../"$1"-webapp/src/main/webapp/restore2
    mv ../"$1"-webapp/src/main/webapp/restore/data.* ../"$1"-webapp/src/main/webapp/restore2

    ./backup.sh -slyc "$1" -t d
    echo "badabing badabum $1 lauft krumm"
}

newws_old() {
    git clone --depth 1 'https://git.getonline.ch/inteco/services/core/web/source/development-env/template-webapp-WS.git' "$1-workspace"
    cd "$1-workspace/.conf"
    # idk if depth can be applied here but let's have a go at it 
    git submodule init --depth 1 && git submodule update --depth 1
    [ -f '../.env' ] && sed -i "s@\[\[customer_id\]\]@$1@g" '../.env'
    npm i && npm run init && node tool.js
    [ "$2" = "" ] && cd .. && node checkout.js && rm -rf .git*
}

note() { vim "$(date +%F)$( [ ! -z "$1" ] && echo "_$1" )".md; }
space() { sudo du -hsx "$1"* | sort -rh | head -n 40; }
rmr() { ls | grep -P "$1" | xargs -d"\n" rm; }
calc() { awk "BEGIN{print $1}"; }
cddir() { mkdir -p "$1" && cd "$1"; }
mvdir() { mkdir "$2" && mv "$1" "$2"; }
mvcd() { mv "$1" "$2" && cd "$2"; }
cpbak() { cp -- "$1"{,.bak}; }
cds() {
    dir=${1//\\//}
    cd "${dir/[cC]:/'/mnt/c'}"
}
findr() { find / -name "$1" -print 2>/dev/null; }

cdloc() {
    loc=$(locate -A "$1" "$2" "$3" "$4")
    hasDirectory=0
    while IFS= read -r line; do
        if [[ -d $line ]]; then
            hasDirectory=1
            cd "$line"
            break
        fi
    done <<<"$(locate -A "$1" "$2" "$3" "$4")"
    if [[ $hasDirectory -eq 0 ]]; then
        echo "No directory found"
    fi
}

extract() {
    if [ -f "$1" ]; then
        case $1 in
        *.tar.bz2) tar xjf "$1" ;;
        *.tar.gz) tar xzvf "$1" ;;
        *.bz2) bunzip2 "$1" ;;
        *.rar) unrar e "$1" ;;
        *.gz) gunzip "$1" ;;
        *.tar) tar xf "$1" ;;
        *.tbz2) tar xjf "$1" ;;
        *.tgz) tar xzvf "$1" ;;
        *.zip) unzip "$1" ;;
        *.Z) uncompress "$1" ;;
        *.7z) 7z x "$1" ;;
        *) echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

color() {
    for c; do
        printf '\e[48;5;%dm%03d' "$c" "$c"
    done
    printf '\e[0m \n'
}

colors() {
    IFS=$' \t\n'
    color {0..15}
    for ((i = 0; i < 6; i++)); do
        color "$(seq $((i * 36 + 16)) $((i * 36 + 51)))"
    done
    color {232..255}
}

tputinfo() {
    echo 'foreground: setaf, background: setab'
    colors
    tput bold
    echo "(bold)This text has the bold attribute.(sgr0)"
    tput sgr0
    tput smul
    echo "(smul)This text is underlined(rmul)"
    tput rmul
    tput blink
    echo "(blink)This text is blinking(sgr0)"
    tput sgr0
    tput rev
    echo "(rev)This text has the reverse attribute(sgr0)"
    tput sgr0
    tput smso
    echo "(smso)This text is in standout mode(rmso)"
    tput rmso
}

formats() {
    for clbg in {40..47} {100..107} 49; do
        #Foreground
        for clfg in {30..37} {90..97} 39; do
            #Formatting
            for attr in 0 1 2 3 4 5 7 9 21 53 '4:3'; do
                #Print the result
                echo -en "\e[${attr};${clbg};${clfg}m ^[${attr};${clbg};${clfg}m \e[0m"
            done
            echo #Newline
        done
    done
}

# filters stack-trace and unnecessary lines from log files and sorts the lines by nr of occurrences
# param: substring of filenames which should be included

flog() {
  # taskset -c '{=$_=slot()-1=}' 

    sort -S4G --parallel=8 <<< "$(find . -maxdepth 1 -type f -name "*$1*" | 
      xargs -P0 -I{} bash -c "parallel -a {} -j 0 --block 10M -P 0 --pipe-part grep -vaE '[[:space:]]+at' |
      grep -ave '\.\.\.' -e ': produktebilder/' -e 'from workspace dms' -e '\.importer\.' |
      sed -r 's/[0-9]{1,2}-[a-zA-Z]{3}-[0-9]{4} [0-9\.:]+ (SEVERE|INFO) \[[a-z0-9-]+\] //' |
      sed -r 's/(([0-9]{4}(-[0-9]{2}){2}T)?([0-9]{2}[:\.]){2}[0-9]{2}\.?([0-9]{6}Z|[0-9]{2,3})?([[:space:]]+[0-9]{1,6}[[:space:]])?|([0-9]{2}-[A-Z][a-z]{2}-[0-9]{4}))//'" )" | 
      uniq -c | 
      sort -S4G --parallel=8 -n | 
      sed "s@^[[:space:]]\+\([0-9]\+\)@$(tput setaf 1)\1$(tput sgr0)@"

# sort <<< $(find . -maxdepth 1 -type f -name "*$1*" | xargs -I{} bash -c "cat {} | grep -v -E '[[:space:]]+at' | grep -v '\.\.\.' | grep -v ': produktebilder/' | grep -v 'from workspace dms' | grep -v '\.importer\.' | sed -r 's/[0-9]{1,2}-[a-zA-Z]{3}-[0-9]{4} [0-9\.:]+ (SEVERE|INFO) \[[a-z0-9-]+\] //g' | sed -r 's/(([0-9]{2}[:\.]?){3}([0-9]{2,3})?|[0-9]{2}-[A-Z][a-z]{2}-[0-9]{4})//g'") | uniq -c | sort -n | sed "s@^[[:space:]]\+\([0-9]\+\)@$(tput setaf 1)\1$(tput sgr0)@g"
}

flogold() {
  output=""
  filenames=$(find . -maxdepth 1 -type f -name "*$1*")
  for filename in "${filenames[@]}"; do
    output="$output\n$(cat "$filename" |
      grep -v -E '[[:space:]]+at' |
      grep -v '\.\.\.' |
      grep -v ': produktebilder/' |
      grep -v 'from workspace dms' |
      grep -v '\.importer\.' |
      sed -r 's/[0-9]{1,2}-[a-zA-Z]{3}-[0-9]{4} [0-9\.:]+ (SEVERE|INFO) \[[a-z0-9-]+\] //g' |
      sed -r 's/(([0-9]{4}(-[0-9]{2}){2}T)?([0-9]{2}[:\.]){2}[0-9]{2}\.?([0-9]{6}Z|[0-9]{2,3})?([[:space:]]+[0-9]{1,6}[[:space:]])?|([0-9]{2}-[A-Z][a-z]{2}-[0-9]{4}))//g' )"
    done

    sort <<< "$output" | uniq -c | sort -n | sed "s@^[[:space:]]\+\([0-9]\+\)@$(tput setaf 1)\1$(tput sgr0)@g"
}
